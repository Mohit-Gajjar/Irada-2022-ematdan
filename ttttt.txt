const Auth = artifacts.require("Auth");

module.exports = function (deployer) {
  deployer.deploy(Auth);
};




pragma solidity 0.5.16;

contract Auth{
   int votes;
    

    constructor() public {
        votes = 0;
    }

    function getVotes() view public returns(int){
        return votes;
    }

    function vote(bool hasAuth) public {
        if(hasAuth == true){      
            votes = votes + 1;
        }
    }
   
}




module.exports = {
  networks: {
    development: {
      host: "192.168.0.109",
      port: 7545,
      network_id: "*",
    },
    advanced: {
      websockets: true,
    },
    contracts_build_directory: "./src/abis/",
    compilers: {
      solc: {
        optimiser: {
          enabled: true,
          runs: 200,
        },
      },
    },
  },
};


pragma solidity 0.6.6;

contract MakeVote{
    struct Voter{
        uint weight;
        bool voted;
        address delegate;
        uint vote;
    }
    struct Proposal {
        bytes32 name;
        uint voteCount;
    }
    address public chairperson;

    mapping(address => Voter) public voters;

    Proposal[] public proposals;

    constructor(bytes32[] memory proposalNames) public {
        chairperson = msg.sender;
        voters[chairperson].weight = 1;

        for (uint i = 0; i <proposalNames.length; i++){
            proposals.push(Proposal({name: proposalNames[i], voteCount: 0}));
        }
    }

    function giveRightToVote(address voter) external {
        require(msg.sender == chairperson,"Only chairperson can give right to vote.");
        require(!voters[voter].voted,"The voter already voted.");

        require(voters[voter].weight == 0);
        voters[voter].weight = 1;
    }

    function delegate (address to ) external {
        Voter storage sender = voters[msg.sender];
        require(!sender.voted, "you already voted.");

        require (to != msg.sender, "Self-delegation is disallowed.");

        while (voters[to].delegate != address(0)){
            to = voters[to].delegate;
            require(to != msg.sender, "Found loop in delegation.");
        }
        sender.voted = true;
        sender.delegate = to;
        Voter storage delegate_ = voters[to];
        if(delegate_.voted){
            proposals[delegate_.vote].voteCount += sender.weight;
        }else {
            delegate_.weight += sender.weight;
        }
    }
    function vote(uint proposal)external {
        Voter storage sender = voters[msg.sender];
        require(sender.weight !=0, "Has no right to vote");
        require(!sender.voted,  "Already voted.");
        sender.voted = true;
        sender.vote = proposal;

        proposals[proposal].voteCount += sender.weight;
    }
    function winningProposal() public view returns(uint winningProposals_){
        uint winningVoteCount = 0;
        for(uint p = 0; p < proposals.length; p++){
            if(proposals[p].voteCount > winningVoteCount){
                winningVoteCount = proposals[p].voteCount;
                winningProposals_ = p;
            }
        }
    }
    function winnerName() external view returns (bytes32 winnerName_){
        winnerName_ = proposals[winningProposal()].name;
    }
}

Round 2 
    1 Voter and organiser has to authenticate self by Google Signin and the Blockchain account address.
    2 Organiser has to give right to vote to the all the voters.
    3 Organiser adds the proposals list.
    4 User per address can vote once in process.
